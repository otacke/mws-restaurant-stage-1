class DBHelper{static get PORT(){return 1337}static get HOST(){return`http://localhost:${DBHelper.PORT}`}static get DATABASE_URL_RESTAURANTS(){return`${DBHelper.HOST}/restaurants`}static get DATABASE_URL_REVIEWS(){return`${DBHelper.HOST}/reviews`}static get DBID_RESTAURANTS(){return"restaurants"}static get DBID_REVIEWS(){return"reviews"}static get DBID_FAVS(){return"favs"}static get DBID_QUEUE(){return"restaurant-queue"}static initListeners(){const e=document.createElement("div");e.setAttribute("id","toast"),e.classList.add("toast"),e.innerHTML="You're offline. If you post any reviews, they will be sent as soon as you are online again.",navigator.onLine||(e.classList.add("visible"),setTimeout(()=>{e.classList.remove("visible")},3e3)),document.body.appendChild(e),window.addEventListener("online",()=>{navigator.serviceWorker&&(DBHelper.flushObjects(DBHelper.DBID_QUEUE),location.reload())}),window.addEventListener("offline",()=>{if(!navigator.serviceWorker)return;const e=document.getElementById("toast");e.classList.add("visible"),setTimeout(()=>{e.classList.remove("visible")},3e3)})}static databaseOpen(e=DBHelper.DBID_RESTAURANTS){return navigator.serviceWorker?idb.open(e,1,t=>{t.createObjectStore(e,{keyPath:"id",autoIncrement:!0})}):Promise.resolve()}static databaseInsert(e,t){return DBHelper.databaseOpen(t).then(r=>{if(!r)return;const a=r.transaction(t,"readwrite"),s=a.objectStore(t);return e.forEach(e=>s.put(e)),a.complete}).catch(e=>console.error(`Could not write to db (${e}).`))}static databaseClear(e){return DBHelper.databaseOpen(e).then(t=>{if(!t)return;const r=t.transaction(e,"readwrite");return r.objectStore(e).clear(),r.complete}).catch(e=>console.error(`Could not clean db (${e}).`))}static databaseRefetch(e){return DBHelper.databaseClear(e).then(()=>{switch(e){case DBHelper.DBID_REVIEWS:DBHelper.fetchReviews(()=>{}).then(()=>!0);break;case DBHelper.DBID_RESTAURANTS:DBHelper.fetchRestaurants(()=>{}).then(()=>!0)}})}static databaseSet(e,t){return fetch(e).then(e=>e.json()).then(e=>(DBHelper.databaseInsert(e,t),e))}static databaseGet(e){return DBHelper.databaseOpen(e).then(t=>{if(!t)return;return t.transaction(e).objectStore(e).getAll()}).then(e=>e)}static fetchRestaurants(e){return DBHelper.databaseGet(DBHelper.DBID_RESTAURANTS).then(e=>e.length?Promise.resolve(e):DBHelper.databaseSet(DBHelper.DATABASE_URL_RESTAURANTS,DBHelper.DBID_RESTAURANTS)).then(t=>{e(null,t)}).catch(t=>{e(t,null)})}static fetchReviews(e){return DBHelper.databaseGet(DBHelper.DBID_REVIEWS).then(e=>e.length?Promise.resolve(e):DBHelper.databaseSet(DBHelper.DATABASE_URL_REVIEWS,DBHelper.DBID_REVIEWS)).then(t=>{e(null,t)}).catch(t=>{e(t,null)})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.find(t=>t.id===parseInt(e));r?t(null,r):t("Restaurant does not exist",null)}})}static fetchReviewById(e,t){DBHelper.fetchReviews((r,a)=>{if(r)t(r,null);else{const r=a.find(t=>t.id===parseInt(e));r?t(null,r):t("Review does not exist",null)}})}static fetchReviewsByRestaurant(e,t){DBHelper.fetchReviews((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.restaurant_id===parseInt(e));t(null,r)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.cuisine_type===e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.neighborhood===e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((a,s)=>{if(a)r(a,null);else{let a=s;"all"!==e&&(a=a.filter(t=>t.cuisine_type===e)),"all"!==t&&(a=a.filter(e=>e.neighborhood===t)),r(null,a)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),a=t.filter((e,r)=>t.indexOf(e)===r);e(null,a)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),a=t.filter((e,r)=>t.indexOf(e)===r);e(null,a)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}.webp`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static postReview(e){return DBHelper.databaseInsert([e],DBHelper.DBID_REVIEWS),DBHelper.pushObject(DBHelper.DBID_QUEUE,{type:DBHelper.DBID_REVIEWS,data:e}),navigator.onLine&&DBHelper.flushObjects(DBHelper.DBID_QUEUE),Promise.resolve(e)}static toggleFav(e){return DBHelper.databaseInsert([e],DBHelper.DBID_RESTAURANTS),DBHelper.pushObject(DBHelper.DBID_QUEUE,{type:DBHelper.DBID_FAVS,data:e}),navigator.onLine&&DBHelper.flushObjects(DBHelper.DBID_QUEUE),Promise.resolve(e)}static pushObject(e,t){const r=DBHelper.retrieveObject(e);null===r?localStorage.setItem(e,JSON.stringify([t])):(r.push(t),localStorage.setItem(e,JSON.stringify(r)))}static retrieveObject(e){const t=localStorage.getItem(e);return t&&JSON.parse(t)}static shiftObject(e){const t=DBHelper.retrieveObject(e);null!==t&&(t.shift(),localStorage.setItem(e,JSON.stringify(t)))}static flushObjects(e){const t=DBHelper.retrieveObject(e);null!==t&&t.some(e=>{switch(e.type){case DBHelper.DBID_REVIEWS:fetch(DBHelper.DATABASE_URL_REVIEWS,{method:"post",body:JSON.stringify(e.data),headers:new Headers({"Content-Type":"application/json"})}).then(e=>{if(!e.ok)return!0;DBHelper.shiftObject(DBHelper.DBID_QUEUE)});break;case DBHelper.DBID_FAVS:fetch(`${DBHelper.DATABASE_URL_RESTAURANTS}/${e.data.id}/?is_favorite=${e.data.is_favorite}`,{method:"put"}).then(e=>{if(!e.ok)return!0;DBHelper.shiftObject(DBHelper.DBID_QUEUE)})}})}}DBHelper.initListeners();
